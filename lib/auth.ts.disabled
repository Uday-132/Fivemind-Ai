import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export interface User {
  id: string
  email: string
  name: string
  provider: string
  avatar?: string
  emailVerified: boolean
  createdAt: Date
}

export interface JWTPayload {
  userId: string
  email: string
  name: string
}

// Password utilities
export async function hashPassword(password: string): Promise<string> {
  const saltRounds = 12
  return bcrypt.hash(password, saltRounds)
}

export async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {
  return bcrypt.compare(password, hashedPassword)
}

// JWT utilities
export function generateToken(payload: JWTPayload): string {
  const secret = process.env.JWT_SECRET || process.env.SESSION_SECRET
  if (!secret) {
    throw new Error('JWT_SECRET or SESSION_SECRET environment variable is required')
  }
  
  return jwt.sign(payload, secret, {
    expiresIn: '7d', // Token expires in 7 days
    issuer: 'ai-agents-platform',
    audience: 'ai-agents-users'
  })
}

export function verifyToken(token: string): JWTPayload | null {
  try {
    const secret = process.env.JWT_SECRET || process.env.SESSION_SECRET
    if (!secret) {
      throw new Error('JWT_SECRET or SESSION_SECRET environment variable is required')
    }
    
    const decoded = jwt.verify(token, secret, {
      issuer: 'ai-agents-platform',
      audience: 'ai-agents-users'
    }) as JWTPayload
    
    return decoded
  } catch (error) {
    console.error('Token verification failed:', error)
    return null
  }
}

// User database operations
export async function createUser(data: {
  email: string
  name: string
  password?: string
  provider?: string
  providerId?: string
  avatar?: string
}): Promise<User> {
  const hashedPassword = data.password ? await hashPassword(data.password) : null
  
  const user = await prisma.user.create({
    data: {
      email: data.email,
      name: data.name,
      password: hashedPassword,
      provider: data.provider || 'email',
      providerId: data.providerId,
      avatar: data.avatar,
      emailVerified: data.provider !== 'email' // Auto-verify social auth users
    },
    select: {
      id: true,
      email: true,
      name: true,
      provider: true,
      avatar: true,
      emailVerified: true,
      createdAt: true
    }
  })
  
  return user
}

export async function findUserByEmail(email: string): Promise<User | null> {
  const user = await prisma.user.findUnique({
    where: { email },
    select: {
      id: true,
      email: true,
      name: true,
      provider: true,
      avatar: true,
      emailVerified: true,
      createdAt: true
    }
  })
  
  return user
}

export async function findUserById(id: string): Promise<User | null> {
  const user = await prisma.user.findUnique({
    where: { id },
    select: {
      id: true,
      email: true,
      name: true,
      provider: true,
      avatar: true,
      emailVerified: true,
      createdAt: true
    }
  })
  
  return user
}

export async function authenticateUser(email: string, password: string): Promise<User | null> {
  const user = await prisma.user.findUnique({
    where: { email },
    select: {
      id: true,
      email: true,
      name: true,
      password: true,
      provider: true,
      avatar: true,
      emailVerified: true,
      createdAt: true
    }
  })
  
  if (!user || !user.password) {
    return null
  }
  
  const isValidPassword = await verifyPassword(password, user.password)
  if (!isValidPassword) {
    return null
  }
  
  // Return user without password
  const { password: _, ...userWithoutPassword } = user
  return userWithoutPassword
}

// Social auth utilities
export async function findOrCreateSocialUser(data: {
  email: string
  name: string
  provider: string
  providerId: string
  avatar?: string
}): Promise<User> {
  // First try to find existing user by email
  let user = await prisma.user.findUnique({
    where: { email: data.email },
    select: {
      id: true,
      email: true,
      name: true,
      provider: true,
      avatar: true,
      emailVerified: true,
      createdAt: true
    }
  })
  
  if (user) {
    // Update user with social provider info if needed
    if (user.provider === 'email') {
      user = await prisma.user.update({
        where: { id: user.id },
        data: {
          provider: data.provider,
          providerId: data.providerId,
          avatar: data.avatar || user.avatar,
          emailVerified: true
        },
        select: {
          id: true,
          email: true,
          name: true,
          provider: true,
          avatar: true,
          emailVerified: true,
          createdAt: true
        }
      })
    }
    return user
  }
  
  // Create new user
  return createUser(data)
}