import { NextRequest, NextResponse } from 'next/server'
import { findOrCreateSocialUser, generateToken } from '@/lib/auth'
import { cookies } from 'next/headers'

interface GitHubTokenResponse {
  access_token: string
  token_type: string
  scope: string
}

interface GitHubUserInfo {
  id: number
  login: string
  name: string
  email: string
  avatar_url: string
}

interface GitHubEmail {
  email: string
  primary: boolean
  verified: boolean
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const code = searchParams.get('code')
    const error = searchParams.get('error')
    
    if (error) {
      return NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/auth/login?error=oauth_error`)
    }
    
    if (!code) {
      return NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/auth/login?error=missing_code`)
    }
    
    // Exchange code for access token
    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        client_id: process.env.GITHUB_CLIENT_ID!,
        client_secret: process.env.GITHUB_CLIENT_SECRET!,
        code,
      }),
    })
    
    if (!tokenResponse.ok) {
      throw new Error('Failed to exchange code for token')
    }
    
    const tokens: GitHubTokenResponse = await tokenResponse.json()
    
    // Get user info from GitHub
    const userResponse = await fetch('https://api.github.com/user', {
      headers: {
        Authorization: `Bearer ${tokens.access_token}`,
        'User-Agent': 'AI-Agents-Platform',
      },
    })
    
    if (!userResponse.ok) {
      throw new Error('Failed to get user info from GitHub')
    }
    
    const githubUser: GitHubUserInfo = await userResponse.json()
    
    // Get user's primary email if not public
    let email = githubUser.email
    if (!email) {
      const emailResponse = await fetch('https://api.github.com/user/emails', {
        headers: {
          Authorization: `Bearer ${tokens.access_token}`,
          'User-Agent': 'AI-Agents-Platform',
        },
      })
      
      if (emailResponse.ok) {
        const emails: GitHubEmail[] = await emailResponse.json()
        const primaryEmail = emails.find(e => e.primary && e.verified)
        email = primaryEmail?.email || emails[0]?.email
      }
    }
    
    if (!email) {
      return NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/auth/login?error=no_email`)
    }
    
    // Find or create user in our database
    const user = await findOrCreateSocialUser({
      email,
      name: githubUser.name || githubUser.login,
      provider: 'github',
      providerId: githubUser.id.toString(),
      avatar: githubUser.avatar_url,
    })
    
    // Generate JWT token
    const token = generateToken({
      userId: user.id,
      email: user.email,
      name: user.name
    })
    
    // Get redirect URL from cookie
    const cookieStore = cookies()
    const redirectUrl = cookieStore.get('auth-redirect')?.value || '/'
    
    // Set auth cookie and clear redirect cookie
    const response = NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}${redirectUrl}`)
    
    response.cookies.set('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7, // 7 days
      path: '/'
    })
    
    response.cookies.set('auth-redirect', '', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 0, // Expire immediately
      path: '/'
    })
    
    return response
    
  } catch (error) {
    console.error('GitHub OAuth callback error:', error)
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/auth/login?error=oauth_callback_error`)
  }
}