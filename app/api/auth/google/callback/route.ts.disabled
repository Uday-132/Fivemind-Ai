import { NextRequest, NextResponse } from 'next/server'
import { findOrCreateSocialUser, generateToken } from '@/lib/auth'
import { cookies } from 'next/headers'

interface GoogleTokenResponse {
  access_token: string
  token_type: string
  expires_in: number
  id_token: string
}

interface GoogleUserInfo {
  id: string
  email: string
  name: string
  picture?: string
  email_verified: boolean
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const code = searchParams.get('code')
    const error = searchParams.get('error')
    
    if (error) {
      return NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/auth/login?error=oauth_error`)
    }
    
    if (!code) {
      return NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/auth/login?error=missing_code`)
    }
    
    // Exchange code for access token
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        client_id: process.env.GOOGLE_CLIENT_ID!,
        client_secret: process.env.GOOGLE_CLIENT_SECRET!,
        code,
        grant_type: 'authorization_code',
        redirect_uri: `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/auth/google/callback`,
      }),
    })
    
    if (!tokenResponse.ok) {
      throw new Error('Failed to exchange code for token')
    }
    
    const tokens: GoogleTokenResponse = await tokenResponse.json()
    
    // Get user info from Google
    const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
      headers: {
        Authorization: `Bearer ${tokens.access_token}`,
      },
    })
    
    if (!userResponse.ok) {
      throw new Error('Failed to get user info from Google')
    }
    
    const googleUser: GoogleUserInfo = await userResponse.json()
    
    // Find or create user in our database
    const user = await findOrCreateSocialUser({
      email: googleUser.email,
      name: googleUser.name,
      provider: 'google',
      providerId: googleUser.id,
      avatar: googleUser.picture,
    })
    
    // Generate JWT token
    const token = generateToken({
      userId: user.id,
      email: user.email,
      name: user.name
    })
    
    // Get redirect URL from cookie
    const cookieStore = cookies()
    const redirectUrl = cookieStore.get('auth-redirect')?.value || '/'
    
    // Set auth cookie and clear redirect cookie
    const response = NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}${redirectUrl}`)
    
    response.cookies.set('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7, // 7 days
      path: '/'
    })
    
    response.cookies.set('auth-redirect', '', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 0, // Expire immediately
      path: '/'
    })
    
    return response
    
  } catch (error) {
    console.error('Google OAuth callback error:', error)
    return NextResponse.redirect(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/auth/login?error=oauth_callback_error`)
  }
}