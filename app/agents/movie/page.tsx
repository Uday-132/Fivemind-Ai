'use client'

import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { EnhancedButton } from '@/components/ui/enhanced-button'
import { EnhancedLoading } from '@/components/ui/enhanced-loading'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Film, Star, Play, Download, AlertCircle, Heart, Zap, ArrowRight, Globe, Calendar } from 'lucide-react'
import { useMutation } from '@tanstack/react-query'

interface MovieRecommendation {
  emotion: string
  language: string
  url: string
  movies: string[]
  count: number
  generatedAt: string
}

const EMOTIONS = [
  { value: 'drama', label: 'Drama', icon: '🎭', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400' },
  { value: 'action', label: 'Action', icon: '💥', color: 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400' },
  { value: 'comedy', label: 'Comedy', icon: '😂', color: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' },
  { value: 'horror', label: 'Horror', icon: '👻', color: 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400' },
  { value: 'crime', label: 'Crime', icon: '🔍', color: 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400' },
  { value: 'fantasy', label: 'Fantasy', icon: '🧙', color: 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/20 dark:text-indigo-400' },
  { value: 'thriller', label: 'Thriller', icon: '⚡', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400' },
  { value: 'romance', label: 'Romance', icon: '💕', color: 'bg-pink-100 text-pink-800 dark:bg-pink-900/20 dark:text-pink-400' }
]

const LANGUAGES = [
  { value: 'english', label: 'English', flag: '🇺🇸' },
  { value: 'telugu', label: 'Telugu', flag: '🇮🇳' },
  { value: 'hindi', label: 'Hindi', flag: '🇮🇳' },
  { value: 'tamil', label: 'Tamil', flag: '🇮🇳' },
  { value: 'malayalam', label: 'Malayalam', flag: '🇮🇳' },
  { value: 'kannada', label: 'Kannada', flag: '🇮🇳' }
]

export default function MovieAgentPage() {
  const [selectedEmotion, setSelectedEmotion] = useState('')
  const [selectedLanguage, setSelectedLanguage] = useState('')
  const [result, setResult] = useState<MovieRecommendation | null>(null)

  const getRecommendations = useMutation({
    mutationFn: async ({ emotion, language }: { emotion: string; language: string }) => {
      const response = await fetch('/api/agents/movie', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ emotion, language })
      })
      
      const responseText = await response.text()
      
      if (!response.ok) {
        let errorMessage = 'Failed to get movie recommendations'
        try {
          const errorData = JSON.parse(responseText)
          errorMessage = errorData.error || errorMessage
        } catch {
          // If response is not JSON, use the text as error message
          errorMessage = responseText || errorMessage
        }
        throw new Error(errorMessage)
      }
      
      try {
        return JSON.parse(responseText)
      } catch (parseError) {
        console.error('Failed to parse response:', responseText)
        throw new Error('Invalid response format from server')
      }
    },
    onSuccess: (data) => {
      setResult(data)
    }
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (selectedEmotion && selectedLanguage) {
      getRecommendations.mutate({ emotion: selectedEmotion, language: selectedLanguage })
    }
  }

  const downloadMovieList = () => {
    if (!result) return
    
    const content = `# Movie Recommendations: ${result.emotion.toUpperCase()} (${result.language.toUpperCase()})

## Search Details
- Genre: ${result.emotion}
- Language: ${result.language}
- Total Movies Found: ${result.count}
- Generated: ${new Date(result.generatedAt).toLocaleString()}

## Movie List
${result.movies.map((movie, index) => `${index + 1}. ${movie}`).join('\n')}

---
Source: IMDb
Generated by Movie Recommendation Agent
`
    
    const blob = new Blob([content], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `movie-recommendations-${result.emotion}-${result.language}-${Date.now()}.md`
    a.click()
    URL.revokeObjectURL(url)
  }

  const selectedEmotionData = EMOTIONS.find(e => e.value === selectedEmotion)
  const selectedLanguageData = LANGUAGES.find(l => l.value === selectedLanguage)

  return (
    <div className="container py-8 space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="w-16 h-16 rounded-full bg-red-50 dark:bg-red-950/20 flex items-center justify-center mx-auto">
          <Film className="h-8 w-8 text-red-500" />
        </div>
        <h1 className="text-3xl md:text-4xl font-bold">Movie Recommendation Agent</h1>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          Discover movies based on your mood and preferred language from IMDb's extensive database
        </p>
      </div>

      {/* Selection Form */}
      <Card className="max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle>Find Your Perfect Movie</CardTitle>
          <CardDescription>
            Select your current mood and preferred language to get personalized movie recommendations
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Emotion Selection */}
            <div>
              <label className="text-sm font-medium mb-3 block">What's your mood? 🎬</label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {EMOTIONS.map((emotion) => (
                  <button
                    key={emotion.value}
                    type="button"
                    onClick={() => setSelectedEmotion(emotion.value)}
                    className={`p-3 rounded-lg border-2 transition-all text-center hover:scale-105 ${
                      selectedEmotion === emotion.value
                        ? 'border-primary bg-primary/10'
                        : 'border-muted hover:border-primary/50'
                    }`}
                    disabled={getRecommendations.isPending}
                  >
                    <div className="text-2xl mb-1">{emotion.icon}</div>
                    <div className="text-sm font-medium">{emotion.label}</div>
                  </button>
                ))}
              </div>
            </div>

            {/* Language Selection */}
            <div>
              <label className="text-sm font-medium mb-3 block">Preferred Language 🌍</label>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {LANGUAGES.map((language) => (
                  <button
                    key={language.value}
                    type="button"
                    onClick={() => setSelectedLanguage(language.value)}
                    className={`p-3 rounded-lg border-2 transition-all text-center hover:scale-105 ${
                      selectedLanguage === language.value
                        ? 'border-primary bg-primary/10'
                        : 'border-muted hover:border-primary/50'
                    }`}
                    disabled={getRecommendations.isPending}
                  >
                    <div className="text-xl mb-1">{language.flag}</div>
                    <div className="text-sm font-medium">{language.label}</div>
                  </button>
                ))}
              </div>
            </div>
            

            <EnhancedButton 
              type="submit" 
              variant="gradient"
              className="w-full flex items-center justify-center" 
              disabled={getRecommendations.isPending || !selectedEmotion || !selectedLanguage}
            >
              {getRecommendations.isPending ? (
                <>
                  <EnhancedLoading variant="sparkles" size="sm" />
                  <span className="ml-2">Finding Movies...</span>
                </>
              ) : (
                <>
                  <Star className="mr-2 h-4 w-4" />
                  Get Recommendations
                  <ArrowRight className="ml-2 h-4 w-4" />
                </>
              )}
            </EnhancedButton>
          </form>
        </CardContent>
      </Card>

      {/* Error Display */}
      {getRecommendations.error && (
        <Card className="max-w-2xl mx-auto border-destructive">
          <CardContent className="pt-6">
            <div className="flex items-center space-x-2 text-destructive">
              <AlertCircle className="h-5 w-5" />
              <span>Error: {getRecommendations.error.message}</span>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Results */}
      {result && (
        <div className="space-y-6">
          {/* Results Header */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-xl flex items-center">
                  <Film className="mr-2 h-5 w-5" />
                  Movie Recommendations
                </CardTitle>
                <EnhancedButton
                  variant="outline"
                  size="sm"
                  onClick={downloadMovieList}
                >
                  <Download className="mr-2 h-4 w-4" />
                  Download List
                </EnhancedButton>
              </div>
              <CardDescription>
                Found {result.count} {result.emotion} movies in {result.language}
              </CardDescription>
              <div className="flex flex-wrap gap-4 text-sm">
                {selectedEmotionData && (
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${selectedEmotionData.color}`}>
                    {selectedEmotionData.icon} {selectedEmotionData.label}
                  </span>
                )}
                {selectedLanguageData && (
                  <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400">
                    {selectedLanguageData.flag} {selectedLanguageData.label}
                  </span>
                )}
                <span className="flex items-center text-muted-foreground">
                  <Calendar className="mr-1 h-4 w-4" />
                  {new Date(result.generatedAt).toLocaleString()}
                </span>
              </div>
            </CardHeader>
          </Card>

          {/* Movie List */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Recommended Movies</CardTitle>
              <CardDescription>
                Curated from IMDb's database based on your preferences
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-3">
                {result.movies.map((movie, index) => (
                  <div
                    key={index}
                    className="flex items-center p-3 rounded-lg border hover:bg-accent/50 transition-colors"
                  >
                    <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center mr-3 flex-shrink-0">
                      <span className="text-sm font-medium text-primary">{index + 1}</span>
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-sm">{movie}</h4>
                    </div>
                    <Play className="h-4 w-4 text-muted-foreground" />
                  </div>
                ))}
              </div>
              
              {result.movies.length === 0 && (
                <div className="text-center py-8 text-muted-foreground">
                  <Film className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No movies found for this combination. Try a different genre or language.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* Features */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 pt-8">
        <Card className="text-center">
          <CardContent className="pt-6">
            <Heart className="h-8 w-8 text-primary mx-auto mb-2" />
            <h3 className="font-semibold">Mood-Based</h3>
            <p className="text-sm text-muted-foreground">Find movies that match your current emotional state</p>
          </CardContent>
        </Card>
        <Card className="text-center">
          <CardContent className="pt-6">
            <Globe className="h-8 w-8 text-primary mx-auto mb-2" />
            <h3 className="font-semibold">Multi-Language</h3>
            <p className="text-sm text-muted-foreground">Support for 6 languages including regional Indian cinema</p>
          </CardContent>
        </Card>
        <Card className="text-center">
          <CardContent className="pt-6">
            <Zap className="h-8 w-8 text-primary mx-auto mb-2" />
            <h3 className="font-semibold">Real-time Data</h3>
            <p className="text-sm text-muted-foreground">Fresh recommendations from IMDb's live database</p>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}